{"version":3,"sources":["components/box.js","components/board.js","components/info.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Box","boxClass","this","props","alive","className","Component","Board","state","makeSeed","setInterval","keepAlive","i","newCols","Object","x","Math","floor","random","setState","boxes","keys","forEach","row","box","push","map","index","key","number","col","thisGen","count","console","log","nextGen","checkNeighbours","createBoxes","drawBoxes","Info","href","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAiBeA,E,iLAXP,IAAIC,EAAQ,cAAUC,KAAKC,MAAMC,OAEjC,OACI,yBAAKC,UAAWJ,Q,GAPVK,aC+JHC,E,2MA7IXC,MAAQ,G,2FATJN,KAAKO,a,0CAGW,IAAD,OACfC,aAAY,WACR,EAAKC,cACN,O,iCAOH,IAAI,IAAIC,EAAI,EAAGA,EAnBZ,GAmBsBA,IAAK,CAK1B,IAFA,IAAIC,EAAU,IAAIC,OAEVC,EAAI,EAAGA,EAvBhB,GAuB0BA,IACrBF,EAAQE,GAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAkB,EAGnDhB,KAAKiB,SAAL,eACKP,EAAIC,O,kCAKL,IAAD,OACHO,EAAQ,GAWZ,OAVAN,OAAOO,KAAKnB,KAAKM,OAAOc,SAAQ,SAACC,EAAKX,GAClCE,OAAOO,KAAK,EAAKb,MAAMe,IAAMD,SAAQ,SAACE,GAClCJ,EAAMK,KAAK,EAAKjB,MAAMe,GAAKC,UAIjBJ,EAAMM,KAAI,SAACF,EAAKG,GAC9B,OAAO,kBAAC,EAAD,CAAKC,IAAKD,EAAOvB,MAAOoB,EAAKK,OAAQF,S,sCAMpCJ,EAAKO,EAAKC,GACtB,IAAIC,EAAQ,EAyDZ,OAtDW,IAART,GACIQ,EAAQR,EAAI,GAAGO,IACdE,IAIG,IAART,GAAqB,IAARO,GACTC,EAAQR,EAAI,GAAGO,EAAK,IACvBE,IAKO,IAART,GAAqB,KAARO,GACTC,EAAQR,EAAI,GAAGO,EAAK,IACvBE,IAKO,KAARF,GACIC,EAAQR,GAAKO,EAAK,IACjBE,IAKG,KAART,GACIQ,EAAQR,EAAI,GAAGO,IACdE,IAKG,KAART,GAAsB,IAARO,GACdC,EAAQR,EAAI,GAAGO,EAAK,IACfE,IAKG,KAART,GAAsB,KAARO,GACVC,EAAQR,EAAI,GAAGO,EAAK,IACnBE,IAKG,IAARF,GACIC,EAAQR,GAAKO,EAAK,IACjBE,IAIDA,I,kCAIPC,QAAQC,IAAI,QAIZ,IAHA,IAAMH,EAAU7B,KAAKM,MACjB2B,EAAUJ,EAENnB,EAAI,EAAGA,EAAI,GAAIA,IAEnB,IADA,IAAIW,EAAMX,EACFG,EAAI,EAAGA,EAAI,GAAIA,IAAI,CACvB,IAAIe,EAAMf,EACNiB,EAAQ9B,KAAKkC,gBAAgBb,EAAKO,EAAKC,GAExCA,EAAQR,GAAKO,GAETE,EAAQ,EACPG,EAAQZ,GAAKO,IAAO,EACJ,IAAVE,GAAyB,IAAVA,EACrBG,EAAQZ,GAAKO,IAAO,EACdE,EAAQ,IACdG,EAAQZ,GAAKO,IAAO,GAGjBC,EAAQR,GAAKO,IAEP,IAAVE,IACCG,EAAQZ,GAAKO,IAAO,GAOpC5B,KAAKiB,SAASgB,K,+BAKd,IAAIE,EAAcnC,KAAKoC,YAEvB,OACI,yBAAKjC,UAAU,SACVgC,O,GAnJG/B,aCeLiC,E,iLAjBP,OACI,yBAAKlC,UAAU,QACX,oDACA,mGACA,4BACI,iHACA,gHACA,iHACA,6HAEJ,mHAAwF,uBAAGmC,KAAK,uDAAR,QAAxF,KACA,mL,GAfGlC,aCYJmC,E,iLARP,OACI,yBAAKpC,UAAU,e,GALNC,aCeNoC,MAVf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.23d4cbe6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Box extends Component {\r\n\r\n    render() {\r\n        \r\n        let boxClass = `Box ${this.props.alive}`\r\n\r\n        return (\r\n            <div className={boxClass}>\r\n                {/* box numbers availible for debugging */}\r\n                {/* {this.props.number}  */}\r\n            </div>\r\n        );\r\n    }\r\n}   \r\n\r\nexport default Box;","import React, { Component } from 'react';\r\n\r\nimport Box from './box';\r\n\r\n// how many row and col do we need based off size of grid (10x10 boxes)\r\nlet rows = 50;\r\nlet cols = 50;\r\n\r\nclass Board extends Component {\r\n\r\n    UNSAFE_componentWillMount(){\r\n        this.makeSeed();\r\n    }\r\n\r\n    componentDidMount(){\r\n        setInterval(() => {\r\n            this.keepAlive();\r\n        }, 250)\r\n    }\r\n\r\n    state = {} // initial state\r\n\r\n    makeSeed() { // create a initial seed with random data\r\n        \r\n        for(let i = 0; i < rows; i ++){\r\n\r\n            // eslint-disable-next-line no-new-object\r\n            let newCols = new Object();\r\n            \r\n            for(let x = 0; x < cols; x++){\r\n                newCols[x] = Math.floor(Math.random() * 10 ) > 7 ? true : false;\r\n            }\r\n\r\n            this.setState({\r\n                [i]: newCols\r\n            })\r\n        }\r\n    }\r\n    \r\n    drawBoxes(){\r\n        let boxes = [];\r\n        Object.keys(this.state).forEach((row, i) => {\r\n            Object.keys(this.state[row]).forEach((box) => {\r\n                boxes.push(this.state[row][box])\r\n            })\r\n        })\r\n\r\n        let returnBoxes = boxes.map((box, index) => {\r\n            return <Box key={index} alive={box} number={index}/>;\r\n        })\r\n\r\n        return returnBoxes;\r\n    };\r\n\r\n    checkNeighbours(row, col, thisGen){\r\n        let count = 0;\r\n\r\n        // check top\r\n        if(row !== 0){ // don't look outside the scope\r\n            if(thisGen[row-1][col]){\r\n                count ++\r\n            }\r\n        }\r\n        // check top left\r\n        if(row !== 0 && col !== 0){ // don't look outside the scope\r\n            if(thisGen[row-1][col -1]){\r\n            count ++\r\n                }\r\n        }\r\n\r\n        //check top right\r\n        if(row !== 0 && col !== 49){ // don't look outside the scope\r\n            if(thisGen[row-1][col +1]){\r\n            count ++\r\n            }\r\n        }\r\n\r\n        //chcek right\r\n        if(col !== 49){\r\n            if(thisGen[row][col +1]){\r\n                count ++\r\n            }\r\n        }\r\n\r\n        //check bottom\r\n        if(row !== 49){ // don't look outside the scope\r\n            if(thisGen[row+1][col]){\r\n                count ++\r\n            }\r\n        }\r\n\r\n        //check bottom left\r\n        if(row !== 49 && col !== 0){ // don't look outside the scope\r\n        if(thisGen[row+1][col -1]){\r\n                count ++\r\n            }\r\n        }\r\n\r\n        //check bottom right\r\n        if(row !== 49 && col !== 49){ // don't look outside the scope\r\n            if(thisGen[row+1][col +1]){\r\n                count ++\r\n            }\r\n        }\r\n\r\n        //chcek left\r\n        if(col !== 0){\r\n            if(thisGen[row][col -1]){\r\n                count ++\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    keepAlive(){\r\n        console.log('fire')\r\n        const thisGen = this.state;\r\n        let nextGen = thisGen;\r\n\r\n        for(let i = 0; i < 50; i++){\r\n            let row = i;\r\n            for(let x = 0; x < 50; x++){\r\n                let col = x;\r\n                let count = this.checkNeighbours(row, col, thisGen);\r\n\r\n                if(thisGen[row][col]){                    \r\n                    \r\n                    if(count < 2){ // Any live cell with fewer than two live neighbours dies, as if by underpopulation\r\n                        nextGen[row][col] = false;\r\n                    } else if(count === 2 || count === 3) { //Any live cell with two or three live neighbours lives on to the next generation.\r\n                        nextGen[row][col] = true;\r\n                    } else if(count > 3){ //Any live cell with more than three live neighbours dies, as if by overpopulation.\r\n                        nextGen[row][col] = false;\r\n                    }\r\n                    \r\n                } else if(!thisGen[row][col]){\r\n\r\n                    if(count === 3) { //Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\r\n                        nextGen[row][col] = true;\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        this.setState(nextGen);\r\n    }\r\n\r\n    render() {\r\n        \r\n        let createBoxes = this.drawBoxes();\r\n\r\n        return (\r\n            <div className=\"Board\">\r\n                {createBoxes}\r\n            </div>\r\n        );\r\n    }\r\n}   \r\n\r\nexport default Board;","import React, { Component } from 'react';\r\n\r\nclass Info extends Component {\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className='Info'>\r\n                <h1>Conways Game of Life</h1>\r\n                <p>The Game of Life is a fun zero player game with the following rules.</p>\r\n                <ul>\r\n                    <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>\r\n                    <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\r\n                    <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\r\n                    <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\r\n                </ul>\r\n                <p>You can read all about this facinating game and find other fantastic implementations <a href=\"https://en.wikipedia.org/wiki/Conway's_Game_of_Life\">here</a>.</p>\r\n                <p>Enjoy this basic implementation below with a random seed. Approimately 20% of the cells will start alive and the game will progress from there.</p>\r\n            </div>\r\n        );\r\n    }\r\n}   \r\n\r\nexport default Info;","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className='Footer'>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}   \r\n\r\nexport default Footer;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Board from './components/board';\r\nimport Info from './components/info';\r\nimport Footer from './components/footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Info />\r\n      <Board />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}